# ==================================================================
# DDoS Protection System - Docker Nginx Configuration
# ==================================================================
# This configuration is optimized for Docker containers and uses
# service names for internal communication
# ==================================================================

# Rate limiting zones - Define before server block
limit_req_zone $binary_remote_addr zone=ddos_general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=ddos_api:10m rate=5r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

server {
    # ==================================================================
    # Basic Server Configuration
    # ==================================================================
    listen 80;
    server_name localhost _;
    
    # Root directory for static files in container
    root /var/www/ddos-protection/frontend/dist;
    index index.html index.htm;
    
    # ==================================================================
    # Logging Configuration
    # ==================================================================
    access_log /var/log/nginx/ddos-protection-access.log combined;
    error_log /var/log/nginx/ddos-protection-error.log warn;
    
    # ==================================================================
    # DDoS Protection & Security Settings
    # ==================================================================
    
    # Request size limits
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    
    # Timeout settings to prevent slow attacks
    client_body_timeout 10s;
    client_header_timeout 10s;
    send_timeout 10s;
    
    # Buffer settings
    large_client_header_buffers 4 16k;
    
    # ==================================================================
    # Security Headers (Applied to all locations)
    # ==================================================================
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Robots-Tag "noindex, nofollow" always;
    
    # ==================================================================
    # Frontend Static Files (React/Vue/Angular)
    # ==================================================================
    location / {
        # Try to serve static files, fallback to index.html for SPA
        try_files $uri $uri/ /index.html;
        
        # Rate limiting for general requests
        limit_req zone=ddos_general burst=20 nodelay;
        limit_conn conn_limit 15;
        
        # Cache static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
    }
    
    # ==================================================================
    # API Endpoints (Backend Proxy) - Using Docker service name
    # ==================================================================
    location /api/ {
        # Stricter rate limiting for API endpoints
        limit_req zone=ddos_api burst=10 nodelay;
        limit_conn conn_limit 5;
        
        # Proxy to Node.js backend container
        proxy_pass http://backend:3000/;
        proxy_http_version 1.1;
        
        # Essential proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeout settings for containers
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
        
        # Disable buffering for real-time data
        proxy_buffering off;
        
        # Handle container restarts gracefully
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 3;
        proxy_next_upstream_timeout 10s;
    }
    
    # ==================================================================
    # WebSocket Support (Real-time Features) - Using Docker service name
    # ==================================================================
    location /socket.io/ {
        # Moderate rate limiting for WebSocket connections
        limit_req zone=ddos_general burst=5 nodelay;
        limit_conn conn_limit 10;
        
        # Proxy to Node.js WebSocket server container
        proxy_pass http://backend:3000/socket.io/;
        proxy_http_version 1.1;
        
        # WebSocket specific headers
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # WebSocket timeout settings for containers
        proxy_connect_timeout 7s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Handle container networking
        proxy_redirect off;
    }
    
    # ==================================================================
    # Health Check Endpoints
    # ==================================================================
    
    # Nginx health check
    location /nginx-health {
        access_log off;
        return 200 "nginx-healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Backend health check proxy
    location /health {
        access_log off;
        proxy_pass http://backend:3000/health;
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
    }
    
    # ==================================================================
    # Security & Access Control
    # ==================================================================
    
    # Block access to hidden files and sensitive directories
    location ~ /\.(git|svn|env|htaccess|htpasswd) {
        deny all;
        return 404;
    }
    
    # Block access to backup files
    location ~ \.(bak|backup|swp|tmp)$ {
        deny all;
        return 404;
    }
    
    # Block access to common sensitive files
    location ~ /(config|logs?|database|admin)/ {
        deny all;
        return 404;
    }
    
    # ==================================================================
    # Error Pages
    # ==================================================================
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
    
    # Custom error page for rate limiting
    error_page 429 @rate_limit;
    location @rate_limit {
        add_header Content-Type text/plain always;
        return 429 "Rate limit exceeded. Please try again later.\n";
    }
}
